// pages/api/analyse-tore.js
export const config = { runtime: "nodejs" };

export default async function handler(req, res) {
  // CORS
  res.setHeader("Access-Control-Allow-Origin", "https://oradia.fr");
  res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");
  if (req.method === "OPTIONS") return res.status(204).end();
  if (req.method !== "POST") return res.status(405).json({ error: "MÃ©thode non autorisÃ©e" });

  // ClÃ© serveur
  if (!process.env.OPENAI_API_KEY) {
    return res.status(500).json({ error: "OPENAI_API_KEY absente cÃ´tÃ© serveur" });
  }

  try {
    const body = req.body || {};

    // Normalisation
    const safe = v => (typeof v === "string" && v.trim()) ? v.trim() : "â€”";
    const norm = o => ({ carte: safe(o?.carte), polarite: safe(o?.polarite), piece: safe(o?.piece) });

    const fam = body.familles || {};
    const emotions       = norm(fam.emotions);
    const besoins        = norm(fam.besoins);
    const transmutation  = norm(fam.transmutation);
    const archetypes     = norm(fam.archetypes);
    const revelations    = norm(fam.revelations);
    const actions        = norm(fam.actions);
    const memoireCosmos  = safe(body?.memoireCosmos);

    if (!emotions.carte || !besoins.carte || !transmutation.carte || !archetypes.carte || !revelations.carte || !actions.carte) {
      return res.status(400).json({ error: "Familles incomplÃ¨tes pour le Tore" });
    }

    // â€”â€”â€” Prompt "canon" Tore â€”â€”â€”
    // RÃ¨gles:
    // - PolaritÃ©: triangle (ðŸ”º) = Ã©nergie masculine ; rond (âš«) = Ã©nergie fÃ©minine. Nâ€™emploie aucun autre terme.
    // - "Carte passerelle" si la piÃ¨ce (ðŸ”º/âš«) â‰  polaritÃ© de la carte; formuler la passerelle.
    // - Familles du Tore: L1 Ã‰MOTIONS, L2 BESOINS, L3 TRANSMUTATIONS, L4 ARCHÃ‰TYPES, L5 RÃ‰VÃ‰LATIONS, L6 ACTIONS, L7 MÃ‰MOIRES COSMOS.
    // - MÃ©moire Cosmos: pas de polaritÃ© propre.
    const SYSTEM = `
Tu es lâ€™analyste officiel dâ€™Oradia pour le Tirage du Tore.

RÃ¨gles strictes:
- PolaritÃ©: utiliser seulement triangle (ðŸ”º) pour lâ€™Ã©nergie masculine et rond (âš«) pour lâ€™Ã©nergie fÃ©minine.
- Lorsque piÃ¨ce â‰  polaritÃ© carte: parler de "carte passerelle" (PAS "mutante") et formuler clairement la passerelle (transition, recadrage, opportunitÃ©).
- Familles: 
  L1 â€” Ã‰MOTIONS
  L2 â€” BESOINS
  L3 â€” TRANSMUTATIONS
  L4 â€” ARCHÃ‰TYPES
  L5 â€” RÃ‰VÃ‰LATIONS
  L6 â€” ACTIONS
  L7 â€” MÃ‰MOIRES COSMOS (sans polaritÃ©).
- Style Oradia: poÃ©tique, ancrÃ©, accessible; relier lâ€™ensemble Ã  lâ€™intention; pas de visuels.

Affichage final EXACT (sans prÃ©ambule):
Votre Tirage du Tore:
Ligne 1 â€“ Ã‰MOTIONS       : {NomCarte} ({ðŸ”º/âš«}) {â€” carte passerelle : â€¦ si piÃ¨ce â‰  polaritÃ© carte}
Ligne 2 â€“ BESOINS        : {â€¦}
Ligne 3 â€“ TRANSMUTATIONS : {â€¦}
Ligne 4 â€“ ARCHÃ‰TYPES     : {â€¦}
Ligne 5 â€“ RÃ‰VÃ‰LATIONS    : {â€¦}
Ligne 6 â€“ ACTIONS        : {â€¦}
Carte MÃ©moires Cosmos :
{â€¦}
SynthÃ¨se du tirage :
{â€¦ (claire, reliÃ©e Ã  lâ€™intention)}
`.trim();

    const USER = `
Intention: ${safe(body.intention)}

Familles tirÃ©es:
- L1 Ã‰MOTIONS      : ${emotions.carte} | polaritÃ© carte: ${emotions.polarite} | piÃ¨ce: ${emotions.piece}
- L2 BESOINS       : ${besoins.carte} | polaritÃ© carte: ${besoins.polarite} | piÃ¨ce: ${besoins.piece}
- L3 TRANSMUTATIONS: ${transmutation.carte} | polaritÃ© carte: ${transmutation.polarite} | piÃ¨ce: ${transmutation.piece}
- L4 ARCHÃ‰TYPES    : ${archetypes.carte} | polaritÃ© carte: ${archetypes.polarite} | piÃ¨ce: ${archetypes.piece}
- L5 RÃ‰VÃ‰LATIONS   : ${revelations.carte} | polaritÃ© carte: ${revelations.polarite} | piÃ¨ce: ${revelations.piece}
- L6 ACTIONS       : ${actions.carte} | polaritÃ© carte: ${actions.polarite} | piÃ¨ce: ${actions.piece}

Carte MÃ‰MOIRES COSMOS: ${memoireCosmos}

Rappels:
- Triangle (ðŸ”º) = Ã©nergie masculine ; Rond (âš«) = Ã©nergie fÃ©minine.
- Dire "carte passerelle" si piÃ¨ce â‰  polaritÃ© carte, et formuler la passerelle.
- Ne pas attribuer de polaritÃ© Ã  la carte MÃ©moires Cosmos.

Rends UNIQUEMENT la structure demandÃ©e ci-dessus, remplie et propre.
`.trim();

    console.log("API Key visible cÃ´tÃ© serveur ?", process.env.OPENAI_API_KEY ? "OK" : "ABSENTE");

    // Timeout (25s)
    const ctrl = new AbortController();
    const t = setTimeout(() => ctrl.abort(), 25_000);

    const r = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        temperature: 0.6,
        max_tokens: 1100,
        messages: [
          { role: "system", content: SYSTEM },
          { role: "user", content: USER }
        ]
      }),
      signal: ctrl.signal
    }).finally(() => clearTimeout(t));

    if (!r.ok) {
      const err = await r.text();
      console.error("[OpenAI ERROR][tore]", err);
      return res.status(502).json({ error: "Analyse indisponible. RÃ©essaie dans un instant." });
    }

    const data = await r.json();
    const texte = (data.choices?.[0]?.message?.content || "").trim();
    return res.status(200).json({ ok: true, texte });
  } catch (e) {
    console.error("Erreur serveur [tore]:", e);
    return res.status(500).json({ error: e?.message || "Erreur serveur" });
  }
}
