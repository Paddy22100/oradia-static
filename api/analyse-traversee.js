// pages/api/analyse-traversee.js
export const config = { runtime: "nodejs" };

export default async function handler(req, res) {
  // CORS
  res.setHeader("Access-Control-Allow-Origin", "https://oradia.fr");
  res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");
  if (req.method === "OPTIONS") return res.status(204).end();
  if (req.method !== "POST") return res.status(405).json({ error: "MÃ©thode non autorisÃ©e" });

  // ClÃ© serveur
  if (!process.env.OPENAI_API_KEY) {
    return res.status(500).json({ error: "OPENAI_API_KEY absente cÃ´tÃ© serveur" });
  }

  try {
    const body = req.body || {};
    const b = body.boussole || {};

    // Normalisation dâ€™entrÃ©e
    const safe = v => (typeof v === "string" && v.trim()) ? v.trim() : "â€”";
    const pick = o => ({ carte: safe(o?.carte), polarite: safe(o?.polarite) });

    const nord  = pick(b.nord);
    const sud   = pick(b.sud);
    const est   = pick(b.est);
    const ouest = pick(b.ouest);

    if (!nord.carte || !sud.carte || !est.carte || !ouest.carte) {
      return res.status(400).json({ error: "Boussole incomplÃ¨te" });
    }

    // â€”â€”â€” Prompt "canon" TraversÃ©e â€”â€”â€”
    // Rappels de vocabulaire/structure:
    // - PolaritÃ©: utiliser UNIQUEMENT les symboles universels: triangle (ðŸ”º) = Ã©nergie masculine ; rond (âš«) = Ã©nergie fÃ©minine.
    // - Parler de "cartes passerelles" (PAS de mutantes) lorsque la piÃ¨ce (tirÃ©e: ðŸ”º/âš«) est diffÃ©rente de la polaritÃ© fixe de la carte.
    // - Familles TraversÃ©e: L1 Ã‰MOTIONS, L2 BESOINS, L3 RÃ‰VÃ‰LATIONS, L4 ACTIONS, + 1 carte MÃ‰MOIRES COSMOS (sans polaritÃ© propre).
    // - MÃ©moire Cosmos nâ€™a PAS de polaritÃ©; ne pas lui en attribuer.
    // - Style Oradia: poÃ©tique, incarnÃ©, non Ã©sotÃ©rique obscur; relier clairement Ã  lâ€™intention.
    const SYSTEM = `
Tu es lâ€™analyste officiel dâ€™Oradia pour le Tirage de la TraversÃ©e.

RÃ¨gles de forme et de fond (Ã  respecter strictement):
- PolaritÃ©: utilise seulement triangle (ðŸ”º) pour lâ€™Ã©nergie masculine et rond (âš«) pour lâ€™Ã©nergie fÃ©minine. Nâ€™emploie jamais dâ€™autres termes.
- Lorsque la polaritÃ© de la PIÃˆCE tirÃ©e (ðŸ”º/âš«) diffÃ¨re de la polaritÃ© FIXE de la carte: dÃ©signe la carte comme "carte passerelle" et formule la passerelle correspondante (transition, recadrage, opportunitÃ©).
- Familles prÃ©sentes (par lignes): 
  L1 â€” Ã‰MOTIONS
  L2 â€” BESOINS
  L3 â€” RÃ‰VÃ‰LATIONS
  L4 â€” ACTIONS
  Carte MÃ‰MOIRES COSMOS (sans polaritÃ© propre).
- Affichage final EXACT (sans prÃ©ambule, sans visuel) :

Votre Tirage de la traversÃ©e:
Ligne 1 â€“ Ã‰MOTIONS : {NomCarte} ({ðŸ”º ou âš«}) {â€” carte passerelle : â€¦ si la piÃ¨ce â‰  polaritÃ© carte}
Ligne 2 â€“ BESOINS   : {â€¦}
Ligne 3 â€“ RÃ‰VÃ‰LATIONS : {â€¦}
Ligne 4 â€“ ACTIONS   : {â€¦}
Carte MÃ©moires Cosmos :
{â€¦}
SynthÃ¨se du tirage :
{â€¦ (ancrÃ©e, claire, reliÃ©e Ã  lâ€™intention)}

- Si des donnÃ©es de profil (HD, EnnÃ©agramme, Astro, etc.) manquent, reste gÃ©nÃ©rique, nâ€™invente rien.
`.trim();

    const USER = `
Intention: ${safe(body.intention)}

Cartes tirÃ©es:
- NORD (Ã‰MOTIONS): ${nord.carte} | polaritÃ© carte: ${nord.polarite} | piÃ¨ce: ${safe(body?.mutations?.emotionsPiece)}
- SUD  (BESOINS): ${sud.carte} | polaritÃ© carte: ${sud.polarite} | piÃ¨ce: ${safe(body?.mutations?.besoinsPiece)}
- EST  (RÃ‰VÃ‰LATIONS): ${est.carte} | polaritÃ© carte: ${est.polarite} | piÃ¨ce: ${safe(body?.mutations?.revelationsPiece)}
- OUEST(ACTIONS): ${ouest.carte} | polaritÃ© carte: ${ouest.polarite} | piÃ¨ce: ${safe(body?.mutations?.actionsPiece)}

Carte MÃ‰MOIRES COSMOS: ${safe(body?.memoireCosmos)}

Rappels:
- Triangle (ðŸ”º) = Ã©nergie masculine ; Rond (âš«) = Ã©nergie fÃ©minine.
- Dire "carte passerelle" si piÃ¨ce â‰  polaritÃ© carte, et formuler la passerelle.
- Ne pas attribuer de polaritÃ© Ã  la carte MÃ©moires Cosmos.

Rends UNIQUEMENT la structure demandÃ©e ci-dessus, remplie et propre.
`.trim();

    console.log("API Key visible cÃ´tÃ© serveur ?", process.env.OPENAI_API_KEY ? "OK" : "ABSENTE");

    // Timeout (25s)
    const ctrl = new AbortController();
    const t = setTimeout(() => ctrl.abort(), 25_000);

    const r = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        temperature: 0.6,
        max_tokens: 900,
        messages: [
          { role: "system", content: SYSTEM },
          { role: "user", content: USER }
        ]
      }),
      signal: ctrl.signal
    }).finally(() => clearTimeout(t));

    if (!r.ok) {
      const err = await r.text();
      console.error("[OpenAI ERROR][traversee]", err);
      return res.status(502).json({ error: "Analyse indisponible. RÃ©essaie dans un instant." });
    }

    const data = await r.json();
    const texte = (data.choices?.[0]?.message?.content || "").trim();
    return res.status(200).json({ ok: true, texte });
  } catch (e) {
    console.error("Erreur serveur [traversee]:", e);
    return res.status(500).json({ error: e?.message || "Erreur serveur" });
  }
}
